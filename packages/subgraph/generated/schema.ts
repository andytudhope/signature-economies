// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class SignatureFund extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("steward", Value.fromString(""));
    this.set("uri", Value.fromString(""));
    this.set("selectMeta", Value.fromString(""));
    this.set("signedAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SignatureFund entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SignatureFund must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SignatureFund", id.toString(), this);
    }
  }

  static load(id: string): SignatureFund | null {
    return changetype<SignatureFund | null>(store.get("SignatureFund", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get steward(): string {
    let value = this.get("steward");
    return value!.toString();
  }

  set steward(value: string) {
    this.set("steward", Value.fromString(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get selectMeta(): string {
    let value = this.get("selectMeta");
    return value!.toString();
  }

  set selectMeta(value: string) {
    this.set("selectMeta", Value.fromString(value));
  }

  get signedAmount(): BigInt {
    let value = this.get("signedAmount");
    return value!.toBigInt();
  }

  set signedAmount(value: BigInt) {
    this.set("signedAmount", Value.fromBigInt(value));
  }
}

export class SignatureNFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAtTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("steward", Value.fromString(""));
    this.set("start", Value.fromI32(0));
    this.set("end", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SignatureNFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SignatureNFT must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SignatureNFT", id.toString(), this);
    }
  }

  static load(id: string): SignatureNFT | null {
    return changetype<SignatureNFT | null>(store.get("SignatureNFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value!.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get steward(): string {
    let value = this.get("steward");
    return value!.toString();
  }

  set steward(value: string) {
    this.set("steward", Value.fromString(value));
  }

  get start(): i32 {
    let value = this.get("start");
    return value!.toI32();
  }

  set start(value: i32) {
    this.set("start", Value.fromI32(value));
  }

  get end(): i32 {
    let value = this.get("end");
    return value!.toI32();
  }

  set end(value: i32) {
    this.set("end", Value.fromI32(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get signatureNft(): Array<string> {
    let value = this.get("signatureNft");
    return value!.toStringArray();
  }

  set signatureNft(value: Array<string>) {
    this.set("signatureNft", Value.fromStringArray(value));
  }

  get signatureFunds(): Array<string> {
    let value = this.get("signatureFunds");
    return value!.toStringArray();
  }

  set signatureFunds(value: Array<string>) {
    this.set("signatureFunds", Value.fromStringArray(value));
  }
}
